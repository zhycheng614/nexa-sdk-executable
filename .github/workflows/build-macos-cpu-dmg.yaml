name: Build Nexa Executables MacOS CPU Standalone

on:
  push:
    branches: [ perry/macos-cpu-standalone ]
  pull_request:
    branches: [ perry/macos-cpu-standalone ]
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install system dependencies
      run: |
        brew install cmake

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller wheel setuptools scikit-build-core macholib delocate

    - name: Create virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate

    - name: Install nexaai
      run: |
        source venv/bin/activate
        pip install -e . --verbose --prefer-binary --index-url https://nexaai.github.io/nexa-sdk/whl/cpu --extra-index-url https://pypi.org/simple --no-cache-dir

    - name: Extract version
      run: |
        VERSION=$(python -c "import re; print(re.search(r'__version__\s*=\s*[\'\"](.*?)[\'\"]', open('nexa/__init__.py').read()).group(1))")
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Build with PyInstaller
      run: |
        source venv/bin/activate
        pyinstaller nexa-macos-cpu-standalone.spec

    - name: Fix executable
      run: |
        source venv/bin/activate
        delocate-listdeps dist/nexa
        delocate-wheel -w fixed_wheel dist/nexa
        mv fixed_wheel/nexa dist/nexa
        otool -L dist/nexa

    - name: Import Code Signing Certificates
      env:
        APP_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE }}
        APP_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
        INSTALLER_CERTIFICATE_BASE64: ${{ secrets.MACOS_INSTALLER_CERTIFICATE }}
        INSTALLER_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_INSTALLER_CERTIFICATE_PASSWORD }}
      run: |
        echo $APP_CERTIFICATE_BASE64 | base64 --decode > app_certificate.p12
        echo $INSTALLER_CERTIFICATE_BASE64 | base64 --decode > installer_certificate.p12
        security create-keychain -p "" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "" build.keychain
        security import app_certificate.p12 -k build.keychain -P $APP_CERTIFICATE_PASSWORD -T /usr/bin/codesign
        security import installer_certificate.p12 -k build.keychain -P $INSTALLER_CERTIFICATE_PASSWORD -T /usr/bin/productsign
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain

    - name: Sign the executable
      env:
        APPLE_DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
      run: |
        # Sign all .dylib files
        find dist -name "*.dylib" -exec codesign --force --options runtime --timestamp -s "$APPLE_DEVELOPER_ID" {} \;

        # Sign the main executable
        codesign --force --options runtime --timestamp -s "$APPLE_DEVELOPER_ID" "dist/nexa"

        # Verify the signature
        codesign -vvv --deep --strict "dist/nexa"

    - name: Create PKG Installer
      run: |
        mkdir -p pkg_root/usr/local/bin pkg_scripts

        # Copy the standalone executable
        cp dist/nexa pkg_root/usr/local/bin/

        # Create preinstall script
        cat << EOF > pkg_scripts/preinstall
        #!/bin/bash
        # Remove existing executable if it exists
        rm -f /usr/local/bin/nexa
        exit 0
        EOF

        # Create postinstall script
        cat << EOF > pkg_scripts/postinstall
        #!/bin/bash
        # Set correct permissions
        chown root:wheel /usr/local/bin/nexa
        chmod 755 /usr/local/bin/nexa

        exit 0
        EOF

        chmod +x pkg_scripts/preinstall pkg_scripts/postinstall

        pkgbuild --root pkg_root \
                --scripts pkg_scripts \
                --identifier com.nexaai.sdk \
                --version ${{ env.VERSION }} \
                --install-location / \
                "Nexa-${{ env.VERSION }}-unsigned.pkg"

        rm -rf pkg_root pkg_scripts

    - name: Sign PKG
      env:
        APPLE_INSTALLER_ID: ${{ secrets.APPLE_INSTALLER_ID }}
      run: |
        # Sign the package
        productsign --sign "$APPLE_INSTALLER_ID" \
                    "Nexa-${{ env.VERSION }}-unsigned.pkg" \
                    "Nexa-${{ env.VERSION }}.pkg"

        # Verify the signature
        pkgutil --check-signature "Nexa-${{ env.VERSION }}.pkg"

        # Remove the unsigned package
        rm "Nexa-${{ env.VERSION }}-unsigned.pkg"

    - name: Notarize PKG
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        echo "Submitting package for notarization..."
        NOTARIZATION_OUTPUT=$(xcrun notarytool submit "Nexa-${{ env.VERSION }}.pkg" --apple-id "$APPLE_ID" --password "$APPLE_ID_PASSWORD" --team-id "$APPLE_TEAM_ID" --wait)
        echo "Submission output:"
        echo "$NOTARIZATION_OUTPUT"
        
        # Extract the submission ID (ensuring it's a single line)
        SUBMISSION_ID=$(echo "$NOTARIZATION_OUTPUT" | grep 'id:' | head -n 1 | awk '{print $2}' | tr -d '\n')
        echo "Extracted Submission ID: $SUBMISSION_ID"
        
        if [ -z "$SUBMISSION_ID" ]; then
          echo "Failed to extract submission ID. Notarization likely failed."
          exit 1
        fi
        
        # Wait for notarization to complete and check the result
        while true; do
          NOTARIZATION_INFO=$(xcrun notarytool info "$SUBMISSION_ID" --apple-id "$APPLE_ID" --password "$APPLE_ID_PASSWORD" --team-id "$APPLE_TEAM_ID")
          STATUS=$(echo "$NOTARIZATION_INFO" | grep "status:" | cut -d: -f2 | xargs)
          echo "Notarization status: $STATUS"
          
          if [ "$STATUS" = "Accepted" ]; then
            echo "Notarization successful"
            echo "Stapling notarization ticket to the package..."
            xcrun stapler staple "Nexa-${{ env.VERSION }}.pkg"
            echo "Notarization ticket stapled to the package"
            break
          elif [ "$STATUS" = "Invalid" ] || [ "$STATUS" = "Rejected" ]; then
            echo "Notarization failed. Fetching detailed log..."
            xcrun notarytool log "$SUBMISSION_ID" --apple-id "$APPLE_ID" --password "$APPLE_ID_PASSWORD" --team-id "$APPLE_TEAM_ID"
            echo "Notarization failed. See log above for details."
            exit 1
          fi
          
          echo "Waiting for 30 seconds before checking again..."
          sleep 30
        done

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nexa-${{ env.VERSION }}-cpu-macos-amd64
        path: |
          Nexa-${{ env.VERSION }}.pkg
          dist/nexa